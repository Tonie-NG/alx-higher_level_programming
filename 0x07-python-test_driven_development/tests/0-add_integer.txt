=========================================
The test file ``0-add_integer.py`` module
=========================================

This module defines a function that adds two valid integers
Prototype: ``add_integer(a, b=98)``.

=====
Usage
=====

```add_integer(...)``` function takes in two arguments and
returns their sum. The arguments must be valid integers

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(3, -5)
    -2

The function also works for floating point numbers too

::

    >>> add_integer(6.0, 4.0)
    10

Important to note that floats are casted into integers before they are added

::

    >>> add_integer(2.1, 1.2)
    3

::

    >>> add_integer(-2.1, -1.2)
    -3

Floats can also be added to integers

::
    >>> add_integer(2.1, 3)
    5

The second argument is optional - by default, it is 98.

::
    >>> add_integer(3)
    101

Non-Numbers
===========
```add_integer(...)``` expects the arguments to be either integer or floats
If either argument isn't a TypeError is raised:

::

    >>> add_integer("test", 1)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::

    >>> add_integer(1, "test")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer


If both arguments are nnot valid, a TypeError is
raised for the first argument.

::

    >>> add_integer("test", "test")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Function cannot parse infinity, it'd fail

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(4, float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

The function also doesn'tr work with NaN values

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(6, float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer
